Vue 页面骨架屏注入实践

jrainlau 前端大学  今天
作者：jrainlau
https://segmentfault.com/a/1190000014832185
作为与用户联系最为密切的前端开发者，用户体验是最值得关注的问题。关于页面loading状态的展示，主流的主要有loading图和进度条两种。除此之外，越来越多的APP采用了“骨架屏”的方式去展示未加载内容，给予了用户焕然一新的体验。随着SPA在前端界的逐渐流行，首屏加载的问题也在困扰着开发者们。那么有没有一个办法，也能让SPA用上骨架屏呢？这就是这篇文章将要探讨的问题。

文章相关代码已经同步到Github，欢迎查阅~
一、何为骨架屏

简单来说，骨架屏就是在页面内容未加载完成的时候，先使用一些图形进行占位，待内容加载完成之后再把它替换掉。


这个技术在一些以内容为主的APP和网页应用较多，接下来我们以一个简单的Vue工程为例，一起探索如何在基于Vue的SPA项目中实现骨架屏。

二、分析Vue页面的内容加载过程

为了简单起见，我们使用 vue-cli搭配 webpack-simple这个模板来新建项目：

vue init webpack
-
simple vue
-
skeleton
这时我们便获得了一个最基本的Vue项目：

.
├──
 
package
.
json
├──
 src
│
   
├──
 
App
.
vue
│
   
├──
 assets
│
   
└──
 main
.
js
├──
 index
.
html
└──
 webpack
.
conf
.
js
安装完了依赖以后，便可以通过 npm run dev去运行这个项目了。但是，在运行项目之前，我们先看看入口的html文件里面都写了些什么。

<!DOCTYPE html>
<html
 
lang
=
"en"
>
  
<head>
    
<meta
 
charset
=
"utf-8"
>
    
<title>
vue-skeleton
</title>
  
</head>
  
<body>
    
<div
 
id
=
"app"
></div>
    
<script
 
src
=
"/dist/build.js"
></script>
  
</body>
</html>
可以看到，DOM里面有且仅有一个 div#app，当js被执行完成之后，此 div#app会被整个替换掉，因此，我们可以来做一下实验，在此div里面添加一些内容：

<div
 
id
=
"app"
>
  
<p>
Hello skeleton
</p>
  
<p>
Hello skeleton
</p>
  
<p>
Hello skeleton
</p>
</div>
打开chrome的开发者工具，在 Network里面找到 throttle功能，调节网速为“Slow 3G”，刷新页面，就能看到页面先是展示了三句“Hello skeleton”，待js加载完了才会替换为原本要展示的内容。


现在，我们对于如何在Vue页面实现骨架屏，已经有了一个很清晰的思路――在 div#app内直接插入骨架屏相关内容即可。

三、易维护的方案

显然，手动在 div#app里面写入骨架屏内容是不科学的，我们需要一个扩展性强且自动化的易维护方案。既然是在Vue项目里，我们当然希望所谓的骨架屏也是一个 .vue文件，它能够在构建时由工具自动注入到 div#app里面。

首先，我们在 /src目录下新建一个 Skeleton.vue文件，其内容如下：

<template>
  
<div
 
class
=
"skeleton page"
>
    
<div
 
class
=
"skeleton-nav"
></div>
    
<div
 
class
=
"skeleton-swiper"
></div>
    
<ul
 
class
=
"skeleton-tabs"
>
      
<li
 
v-for
=
"i in 8"
 
class
=
"skeleton-tabs-item"
><span></span></li>
    
</ul>
    
<div
 
class
=
"skeleton-banner"
></div>
    
<div
 
v-for
=
"i in 6"
 
class
=
"skeleton-productions"
></div>
  
</div>
</template>
<style>
.
skeleton 
{
  position
:
 relative
;
  height
:
 
100
%;
  overflow
:
 hidden
;
  padding
:
 
15px
;
  box
-
sizing
:
 border
-
box
;
  background
:
 
#fff;
}
.
skeleton
-
nav 
{
  height
:
 
45px
;
  background
:
 
#eee;
  margin
-
bottom
:
 
15px
;
}
.
skeleton
-
swiper 
{
  height
:
 
160px
;
  background
:
 
#eee;
  margin
-
bottom
:
 
15px
;
}
.
skeleton
-
tabs 
{
  list
-
style
:
 none
;
  padding
:
 
0
;
  margin
:
 
0
 
-
15px
;
  display
:
 flex
;
  flex
-
wrap
:
 wrap
;
}
.
skeleton
-
tabs
-
item 
{
  width
:
 
25
%;
  height
:
 
55px
;
  box
-
sizing
:
 border
-
box
;
  text
-
align
:
 center
;
  margin
-
bottom
:
 
15px
;
}
.
skeleton
-
tabs
-
item span 
{
  display
:
 
inline
-
block
;
  width
:
 
55px
;
  height
:
 
55px
;
  border
-
radius
:
 
55px
;
  background
:
 
#eee;
}
.
skeleton
-
banner 
{
  height
:
 
60px
;
  background
:
 
#eee;
  margin
-
bottom
:
 
15px
;
}
.
skeleton
-
productions 
{
  height
:
 
20px
;
  margin
-
bottom
:
 
15px
;
  background
:
 
#eee;
}
</style>
接下来，再新建一个 skeleton.entry.js入口文件：

import
 
Vue
 
from
 
'vue'
import
 
Skeleton
 
from
 
'./Skeleton.vue'
export
 
default
 
new
 
Vue
({
  components
:
 
{
    
Skeleton
  
},
  
template
:
 
'<skeleton />'
})
在完成了骨架屏的准备之后，就轮到一个关键插件 vue-server-renderer登场了。该插件本用于服务端渲染，但是在这个例子里，我们主要利用它能够把 .vue文件处理成 html和 css字符串的功能，来完成骨架屏的注入，流程如下：


四、方案实现

根据流程图，我们还需要在根目录新建一个 webpack.skeleton.conf.js文件，以专门用来进行骨架屏的构建。

const
 path 
=
 
require
(
'path'
)
const
 webpack 
=
 
require
(
'webpack'
)
const
 nodeExternals 
=
 
require
(
'webpack-node-externals'
)
const
 
VueSSRServerPlugin
 
=
 
require
(
'vue-server-renderer/server-plugin'
)
module
.
exports 
=
 
{
  target
:
 
'node'
,
  entry
:
 
{
    skeleton
:
 
'./src/skeleton.entry.js'
  
},
  output
:
 
{
    path
:
 path
.
resolve
(
__dirname
,
 
'./dist'
),
    publicPath
:
 
'/dist/'
,
    filename
:
 
'[name].js'
,
    libraryTarget
:
 
'commonjs2'
  
},
  
module
:
 
{
    rules
:
 
[
      
{
        test
:
 
/\.css$/
,
        
use
:
 
[
          
'vue-style-loader'
,
          
'css-loader'
        
]
      
},
      
{
        test
:
 
/\.vue$/
,
        loader
:
 
'vue-loader'
      
}
    
]
  
},
  externals
:
 nodeExternals
({
    whitelist
:
 
/\.css$/
  
}),
  resolve
:
 
{
    
alias
:
 
{
      
'vue$'
:
 
'vue/dist/vue.esm.js'
    
},
    extensions
:
 
[
'*'
,
 
'.js'
,
 
'.vue'
,
 
'.json'
]
  
},
  plugins
:
 
[
    
new
 
VueSSRServerPlugin
({
      filename
:
 
'skeleton.json'
    
})
  
]
}
可以看到，该配置文件和普通的配置文件基本完全一致，主要的区别在于其 target:'node'，配置了 externals，以及在 plugins里面加入了 VueSSRServerPlugin。在 VueSSRServerPlugin中，指定了其输出的json文件名。我们可以通过运行下列指令，在 /dist目录下生成一个 skeleton.json文件：

webpack 
--
config 
./
webpack
.
skeleton
.
conf
.
js
这个文件在记载了骨架屏的内容和样式，会提供给 vue-server-renderer使用。

接下来，在根目录下新建一个 skeleton.js，该文件即将被用于往 index.html内插入骨架屏。

const
 fs 
=
 
require
(
'fs'
)
const
 
{
 resolve 
}
 
=
 
require
(
'path'
)
const
 createBundleRenderer 
=
 
require
(
'vue-server-renderer'
).
createBundleRenderer
// 读取`skeleton.json`，以`index.html`为模板写入内容
const
 renderer 
=
 createBundleRenderer
(
resolve
(
__dirname
,
 
'./dist/skeleton.json'
),
 
{
  
template
:
 fs
.
readFileSync
(
resolve
(
__dirname
,
 
'./index.html'
),
 
'utf-8'
)
})
// 把上一步模板完成的内容写入（替换）`index.html`
renderer
.
renderToString
({},
 
(
err
,
 html
)
 
=>
 
{
  fs
.
writeFileSync
(
'index.html'
,
 html
,
 
'utf-8'
)
})
注意，作为模板的 html文件，需要在被写入内容的位置添加 <!--vue-ssr-outlet-->占位符，本例子在 div#app里写入：

<div
 
id
=
"app"
>
<!--vue-ssr-outlet-->
</div>
接下来，只要运行 node skeleton.js，就可以完成骨架屏的注入了。运行效果如下：

<html
 
lang
=
"en"
>
  
<head>
    
<meta
 
charset
=
"utf-8"
>
    
<title>
vue-skeleton
</title>
  
<style
 
data-vue-ssr-id
=
"742d88be:0"
>
.
skeleton 
{
  position
:
 relative
;
  height
:
 
100
%;
  overflow
:
 hidden
;
  padding
:
 
15px
;
  box
-
sizing
:
 border
-
box
;
  background
:
 
#fff;
}
.
skeleton
-
nav 
{
  height
:
 
45px
;
  background
:
 
#eee;
  margin
-
bottom
:
 
15px
;
}
.
skeleton
-
swiper 
{
  height
:
 
160px
;
  background
:
 
#eee;
  margin
-
bottom
:
 
15px
;
}
.
skeleton
-
tabs 
{
  list
-
style
:
 none
;
  padding
:
 
0
;
  margin
:
 
0
 
-
15px
;
  display
:
 flex
;
  flex
-
wrap
:
 wrap
;
}
.
skeleton
-
tabs
-
item 
{
  width
:
 
25
%;
  height
:
 
55px
;
  box
-
sizing
:
 border
-
box
;
  text
-
align
:
 center
;
  margin
-
bottom
:
 
15px
;
}
.
skeleton
-
tabs
-
item span 
{
  display
:
 
inline
-
block
;
  width
:
 
55px
;
  height
:
 
55px
;
  border
-
radius
:
 
55px
;
  background
:
 
#eee;
}
.
skeleton
-
banner 
{
  height
:
 
60px
;
  background
:
 
#eee;
  margin
-
bottom
:
 
15px
;
}
.
skeleton
-
productions 
{
  height
:
 
20px
;
  margin
-
bottom
:
 
15px
;
  background
:
 
#eee;
}
</style></head>
  
<body>
    
<div
 
id
=
"app"
>
      
<div
 
data-server-rendered
=
"true"
 
class
=
"skeleton page"
><div
 
class
=
"skeleton-nav"
></div>
 
<div
 
class
=
"skeleton-swiper"
></div>
 
<ul
 
class
=
"skeleton-tabs"
><li
 
class
=
"skeleton-tabs-item"
><span></span></li><li
 
class
=
"skeleton-tabs-item"
><span></span></li><li
 
class
=
"skeleton-tabs-item"
><span></span></li><li
 
class
=
"skeleton-tabs-item"
><span></span></li><li
 
class
=
"skeleton-tabs-item"
><span></span></li><li
 
class
=
"skeleton-tabs-item"
><span></span></li><li
 
class
=
"skeleton-tabs-item"
><span></span></li><li
 
class
=
"skeleton-tabs-item"
><span></span></li></ul>
 
<div
 
class
=
"skeleton-banner"
></div>
 
<div
 
class
=
"skeleton-productions"
></div><div
 
class
=
"skeleton-productions"
></div><div
 
class
=
"skeleton-productions"
></div><div
 
class
=
"skeleton-productions"
></div><div
 
class
=
"skeleton-productions"
></div><div
 
class
=
"skeleton-productions"
></div></div>
    
</div>
    
<script
 
src
=
"/dist/build.js"
></script>
  
</body>
</html>
可以看到，骨架屏的样式通过 <style></style>标签直接被插入，而骨架屏的内容也被放置在 div#app之间。当然，我们还可以进一步处理，把这些内容都压缩一下。改写 skeleton.js，在里面添加 html-minifier：

...
+
 
const
 htmlMinifier 
=
 
require
(
'html-minifier'
)
...
renderer
.
renderToString
({},
 
(
err
,
 html
)
 
=>
 
{
+
  html 
=
 htmlMinifier
.
minify
(
html
,
 
{
+
    collapseWhitespace
:
 
true
,
+
    minifyCSS
:
 
true
+
  
})
  fs
.
writeFileSync
(
'index.html'
,
 html
,
 
'utf-8'
)
})
来看看效果：


效果非常不错！至此，Vue页面接入骨架屏已经完全实现了。

尾声

本文实现了一套最简单的Vue页面骨架屏注入实践，如果想看更复杂一些的例子，可以参考《为vue项目添加骨架屏》这篇文章，本文的许多思路也是受其启发，非常值得阅读。

如果还有任何更好的实现思路，也欢迎和我探讨，有机会我也会总结基于 React的骨架屏注入实践，敬请期待！

本公众号内回复 “资料”, 下载各种编程资料；
本公众号内回复“面试题”“ajax”等词，可看对应资料；
其它功能正在完善，不定期更新....
觉得本文对你有帮助？请分享给更多人
关注「前端大学」，提升前端技能

阅读原文阅读 12846
精选留言
写留言
 4
暴三立 
 react表示一脸嫌弃
 1
贝贝 
 赶紧来个react吧，期待哦
